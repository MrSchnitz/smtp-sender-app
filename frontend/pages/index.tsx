import type {
  GetServerSideProps,
  GetServerSidePropsContext,
  NextPage,
} from "next";
import Head from "next/head";
import Image from "next/image";
import styles from "../styles/Home.module.css";
import { useMutation, gql, useQuery } from "@apollo/client";
import {
  addApolloState,
  APOLLO_STATE_PROP_NAME,
  initializeApollo,
} from "../lib/apolloClient";
import { useEffect, useReducer } from "react";
import { useForm } from "react-hook-form";
import {
  getUserIdFromCookies,
  ID_KEY,
  setUserIdToCookies,
} from "../lib/helpers";
import getConfig from "next/config";

interface MailDTO {
  id: string;
  from: string;
  to: string;
  subject: string;
  text: string;
  userId: string;
}

type Action = { type: string; payload?: any };

const mailInitialState: MailDTO = {
  id: "",
  from: "",
  subject: "",
  text: "",
  to: "",
  userId: "",
};

const cMailActions = {
  RESET: "RESET",
  SET_FROM: "SET_FROM",
  SET_TO: "SET_TO",
  SET_SUBJECT: "SET_SUBJECT",
  SET_TEXT: "SET_TEXT",
};

const mailActions: { [key: string]: (payload?: any) => Action } = {
  reset: () => ({
    type: cMailActions.RESET,
  }),
  setFrom: (from: string) => ({
    type: cMailActions.SET_FROM,
    payload: from,
  }),
  setTo: (to: string) => ({
    type: cMailActions.SET_TO,
    payload: to,
  }),
  setSubject: (subject: string) => ({
    type: cMailActions.SET_SUBJECT,
    payload: subject,
  }),
  setText: (text: string) => ({
    type: cMailActions.SET_TEXT,
    payload: text,
  }),
};

function reducer(state: MailDTO, { type, payload }: Action): MailDTO {
  switch (type) {
    case cMailActions.RESET:
      return mailInitialState;
    case cMailActions.SET_FROM:
      return { ...state, from: payload };
    case cMailActions.SET_TO:
      return { ...state, to: payload };
    case cMailActions.SET_SUBJECT:
      return { ...state, subject: payload };
    case cMailActions.SET_TEXT:
      return { ...state, text: payload };
    default:
      return state;
  }
}

const FETCH_DATA = gql`
  query getMails($user: String!) {
    mails(userId: $user) {
      id
      from
      to
      subject
      text
      userId
    }
  }
`;

const SEND_MAIL_MUTATION = gql`
  mutation SendMail($mailBody: MailDTO!) {
    sendMail(mail: $mailBody) {
      message
    }
  }
`;

interface IProps {
  mails?: null | MailDTO[];
}

const Home: NextPage<IProps> = () => {
  const [state, dispatch] = useReducer(reducer, mailInitialState);

  const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm({ mode: "onChange" });

  const [sendMail, { data, loading, error }] = useMutation(SEND_MAIL_MUTATION, {
    variables: {
      mailBody: {
        from: state.from,
        to: state.to,
        subject: state.subject,
        text: state.text,
        userId: getUserIdFromCookies()
          ? getUserIdFromCookies()
          : setUserIdToCookies(),
      },
    },
    refetchQueries: [FETCH_DATA, "getMails"],
    onCompleted: () => dispatch(mailActions.reset())
  });

  const { data: mailsData, loading: fetchDataLoading } = useQuery(FETCH_DATA, {
    variables: {
      user: getUserIdFromCookies(),
    },
  });

  const {publicRuntimeConfig} = getConfig();

  // console.log("Hmmm", mailsData);

  return (
    <div className={styles.container}>
      <Head>
        <title>SMTP sender app</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="container mx-auto min-h-screen flex flex-col justify-center">
        <h1 className="p-5 text-5xl text-center font-bold text-primary">
          Welcome to SMTP sender app
        </h1>
        {loading ? (
          <button className="btn btn-ghost loading" />
        ) : (
          data && (
            <div className="alert alert-success mb-4">
              <div className="flex-1">
                <label>{data.sendMail.message}</label>
              </div>
            </div>
          )
        )}
        <div className="card bordered shadow-lg">
          <div className="card-body">
            <h1 className="card-title text-primary">Write an email</h1>
            <div className="flex flex-row w-full">
              <div className="form-control flex-grow">
                <label className="label">
                  <span className="label-text">From</span>
                </label>
                <label className="input-group">
                  <span>Email</span>
                  <input
                    type="text"
                    placeholder="From"
                    className={`w-full input input-primary input-bordered ${
                      errors?.from && "input-error"
                    }`}
                    {...register("from", {
                      required: true,
                      pattern: {
                        value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}$/i,
                        message: "Invalid email address",
                      },
                      onChange: (event) =>
                        dispatch(mailActions.setFrom(event.target.value)),
                    })}
                  />
                </label>
              </div>
              <div className="divider divider-vertical"></div>
              <div className="form-control flex-grow">
                <label className="label">
                  <span className="label-text">To</span>
                </label>
                <label className="input-group">
                  <span>Email</span>
                  <input
                    type="text"
                    placeholder="To"
                    className={`w-full input input-primary input-bordered ${
                      errors?.to && "input-error"
                    }`}
                    {...register("to", {
                      required: true,
                      pattern: {
                        value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}$/i,
                        message: "Invalid email address",
                      },
                      onChange: (event) =>
                        dispatch(mailActions.setTo(event.target.value)),
                    })}
                  />
                </label>
              </div>
            </div>
            <div className="form-control">
              <label className="label">
                <span className="label-text">Subject</span>
              </label>
              <input
                type="text"
                placeholder="Subject"
                className={`input input-primary input-bordered ${
                  errors?.subject && "input-error"
                }`}
                {...register("subject", {
                  required: true,
                  onChange: (event) =>
                    dispatch(mailActions.setSubject(event.target.value)),
                })}
              />
            </div>
            <div className="form-control">
              <label className="label">
                <span className="label-text">Text</span>
              </label>
              <textarea
                className={`textarea h-24 textarea-bordered textarea-primary ${
                  errors?.text && "input-error"
                }`}
                placeholder="Text"
                {...register("text", {
                  required: true,
                  onChange: (event) =>
                    dispatch(mailActions.setText(event.target.value)),
                })}
              />
            </div>
            <button
              disabled={Object.keys(errors).length !== 0}
              className={`btn btn-primary mt mt-4 ${loading && "loading"}`}
              onClick={() => sendMail()}
            >
              Send Mail
            </button>
          </div>
        </div>

        <footer className="card bordered shadow-lg mt-6">
          <div className="card-body">
            <h1 className="card-title text-primary">Previous emails</h1>
            <table className="table w-full table-compact">
              <thead>
                <tr>
                  <th />
                  <th>From</th>
                  <th>To</th>
                  <th>Subject</th>
                  <th>Text</th>
                </tr>
              </thead>
              <tbody>
                {fetchDataLoading ? (
                  <tr>
                    <td colSpan={5}>
                      <button className="btn btn-ghost loading w-full" />
                    </td>
                  </tr>
                ) : (
                  mailsData &&
                  mailsData.mails.map((mail: MailDTO, index: number) => (
                    <tr key={mail.id}>
                      <td>{index}</td>
                      <td>{mail.from}</td>
                      <td>{mail.to}</td>
                      <td>{mail.subject}</td>
                      <td>{mail.text}</td>
                    </tr>
                  ))
                )}
              </tbody>
            </table>
          </div>
        </footer>
      </main>
    </div>
  );
};

export default Home;

// export async function getServerSideProps(ctx: GetServerSidePropsContext) {
//   const apolloClient = initializeApollo();
//
//   if (ctx.req.cookies.hasOwnProperty(ID_KEY)) {
//     const {
//       data: { mails },
//     } = await apolloClient.query({
//       query: FETCH_DATA,
//       variables: {
//         user: ctx.req.cookies[ID_KEY],
//       },
//     });
//   }
//
//   return {
//     props: {
//       initialApolloProps: apolloClient.cache.extract(),
//     }
//   }

//   return addApolloState(apolloClient, {
//     props: {
//       mails,
//     },
//   });
// } else {
//   return {
//     props: {},
//   };
// }
// }
